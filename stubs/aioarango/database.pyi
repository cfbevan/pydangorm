from aioarango.api import ApiGroup as ApiGroup
from aioarango.aql import AQL as AQL
from aioarango.backup import Backup as Backup
from aioarango.cluster import Cluster as Cluster
from aioarango.collection import StandardCollection as StandardCollection
from aioarango.connection import Connection as Connection
from aioarango.exceptions import (
    AnalyzerCreateError as AnalyzerCreateError,
    AnalyzerDeleteError as AnalyzerDeleteError,
    AnalyzerGetError as AnalyzerGetError,
    AnalyzerListError as AnalyzerListError,
    AsyncJobClearError as AsyncJobClearError,
    AsyncJobListError as AsyncJobListError,
    CollectionCreateError as CollectionCreateError,
    CollectionDeleteError as CollectionDeleteError,
    CollectionListError as CollectionListError,
    DatabaseCreateError as DatabaseCreateError,
    DatabaseDeleteError as DatabaseDeleteError,
    DatabaseListError as DatabaseListError,
    DatabasePropertiesError as DatabasePropertiesError,
    GraphCreateError as GraphCreateError,
    GraphDeleteError as GraphDeleteError,
    GraphListError as GraphListError,
    JWTSecretListError as JWTSecretListError,
    JWTSecretReloadError as JWTSecretReloadError,
    PermissionGetError as PermissionGetError,
    PermissionListError as PermissionListError,
    PermissionResetError as PermissionResetError,
    PermissionUpdateError as PermissionUpdateError,
    ServerDetailsError as ServerDetailsError,
    ServerEchoError as ServerEchoError,
    ServerEncryptionError as ServerEncryptionError,
    ServerEngineError as ServerEngineError,
    ServerLogLevelError as ServerLogLevelError,
    ServerLogLevelSetError as ServerLogLevelSetError,
    ServerMetricsError as ServerMetricsError,
    ServerReadLogError as ServerReadLogError,
    ServerReloadRoutingError as ServerReloadRoutingError,
    ServerRequiredDBVersionError as ServerRequiredDBVersionError,
    ServerRoleError as ServerRoleError,
    ServerRunTestsError as ServerRunTestsError,
    ServerShutdownError as ServerShutdownError,
    ServerStatisticsError as ServerStatisticsError,
    ServerStatusError as ServerStatusError,
    ServerTLSError as ServerTLSError,
    ServerTLSReloadError as ServerTLSReloadError,
    ServerTimeError as ServerTimeError,
    ServerVersionError as ServerVersionError,
    TaskCreateError as TaskCreateError,
    TaskDeleteError as TaskDeleteError,
    TaskGetError as TaskGetError,
    TaskListError as TaskListError,
    TransactionExecuteError as TransactionExecuteError,
    UserCreateError as UserCreateError,
    UserDeleteError as UserDeleteError,
    UserGetError as UserGetError,
    UserListError as UserListError,
    UserReplaceError as UserReplaceError,
    UserUpdateError as UserUpdateError,
    ViewCreateError as ViewCreateError,
    ViewDeleteError as ViewDeleteError,
    ViewGetError as ViewGetError,
    ViewListError as ViewListError,
    ViewRenameError as ViewRenameError,
    ViewReplaceError as ViewReplaceError,
    ViewUpdateError as ViewUpdateError,
)
from aioarango.executor import (
    AsyncApiExecutor as AsyncApiExecutor,
    BatchApiExecutor as BatchApiExecutor,
    DefaultApiExecutor as DefaultApiExecutor,
    TransactionApiExecutor as TransactionApiExecutor,
)
from aioarango.formatter import (
    format_body as format_body,
    format_database as format_database,
    format_server_status as format_server_status,
    format_tls as format_tls,
    format_view as format_view,
)
from aioarango.foxx import Foxx as Foxx
from aioarango.graph import Graph as Graph
from aioarango.job import BatchJob as BatchJob
from aioarango.pregel import Pregel as Pregel
from aioarango.replication import Replication as Replication
from aioarango.request import Request as Request
from aioarango.response import Response as Response
from aioarango.result import Result as Result
from aioarango.typings import Json as Json, Jsons as Jsons, Params as Params
from aioarango.utils import get_col_name as get_col_name
from aioarango.wal import WAL as WAL
from datetime import datetime
from numbers import Number
from typing import Any, List, Optional, Sequence, Union

class Database(ApiGroup):
    def __getitem__(self, name: str) -> StandardCollection: ...
    @property
    def name(self) -> str: ...
    @property
    def aql(self) -> AQL: ...
    @property
    def wal(self) -> WAL: ...
    @property
    def foxx(self) -> Foxx: ...
    @property
    def pregel(self) -> Pregel: ...
    @property
    def replication(self) -> Replication: ...
    @property
    def cluster(self) -> Cluster: ...
    @property
    def backup(self) -> Backup: ...
    async def properties(self) -> Result[Json]: ...
    async def execute_transaction(
        self,
        command: str,
        params: Optional[Json] = ...,
        read: Optional[Sequence[str]] = ...,
        write: Optional[Sequence[str]] = ...,
        sync: Optional[bool] = ...,
        timeout: Optional[Number] = ...,
        max_size: Optional[int] = ...,
        allow_implicit: Optional[bool] = ...,
        intermediate_commit_count: Optional[int] = ...,
        intermediate_commit_size: Optional[int] = ...,
    ) -> Result[Any]: ...
    async def version(self) -> Result[str]: ...
    async def details(self) -> Result[Json]: ...
    async def status(self) -> Result[Json]: ...
    async def required_db_version(self) -> Result[str]: ...
    async def engine(self) -> Result[Json]: ...
    async def statistics(self, description: bool = ...) -> Result[Json]: ...
    async def role(self) -> Result[str]: ...
    async def time(self) -> Result[datetime]: ...
    async def echo(self) -> Result[Json]: ...
    async def shutdown(self) -> Result[bool]: ...
    async def run_tests(self, tests: Sequence[str]) -> Result[Json]: ...
    async def read_log(
        self,
        upto: Optional[Union[int, str]] = ...,
        level: Optional[Union[int, str]] = ...,
        start: Optional[int] = ...,
        size: Optional[int] = ...,
        offset: Optional[int] = ...,
        search: Optional[str] = ...,
        sort: Optional[str] = ...,
    ) -> Result[Json]: ...
    async def log_levels(self) -> Result[Json]: ...
    async def set_log_levels(self, **kwargs: str) -> Result[Json]: ...
    async def reload_routing(self) -> Result[bool]: ...
    async def metrics(self) -> Result[str]: ...
    async def jwt_secrets(self) -> Result[Json]: ...
    async def reload_jwt_secrets(self) -> Result[Json]: ...
    async def tls(self) -> Result[Json]: ...
    async def reload_tls(self) -> Result[Json]: ...
    async def encryption(self) -> Result[Json]: ...
    async def databases(self) -> Result[List[str]]: ...
    async def has_database(self, name: str) -> Result[bool]: ...
    async def create_database(
        self,
        name: str,
        users: Optional[Sequence[Json]] = ...,
        replication_factor: Union[int, str, None] = ...,
        write_concern: Optional[int] = ...,
        sharding: Optional[str] = ...,
    ) -> Result[bool]: ...
    async def delete_database(self, name: str, ignore_missing: bool = ...) -> Result[bool]: ...
    def collection(self, name: str) -> StandardCollection: ...
    async def has_collection(self, name): ...
    async def collections(self) -> Result[Jsons]: ...
    async def create_collection(
        self,
        name: str,
        sync: bool = ...,
        system: bool = ...,
        edge: bool = ...,
        user_keys: bool = ...,
        key_increment: Optional[int] = ...,
        key_offset: Optional[int] = ...,
        key_generator: str = ...,
        shard_fields: Optional[Sequence[str]] = ...,
        shard_count: Optional[int] = ...,
        replication_factor: Optional[int] = ...,
        shard_like: Optional[str] = ...,
        sync_replication: Optional[bool] = ...,
        enforce_replication_factor: Optional[bool] = ...,
        sharding_strategy: Optional[str] = ...,
        smart_join_attribute: Optional[str] = ...,
        write_concern: Optional[int] = ...,
        schema: Optional[Json] = ...,
    ) -> Result[StandardCollection]: ...
    async def delete_collection(
        self, name: str, ignore_missing: bool = ..., system: Optional[bool] = ...
    ) -> Result[bool]: ...
    def graph(self, name: str) -> Graph: ...
    async def has_graph(self, name: str) -> Result[bool]: ...
    async def graphs(self) -> Result[Jsons]: ...
    async def create_graph(
        self,
        name: str,
        edge_definitions: Optional[Sequence[Json]] = ...,
        orphan_collections: Optional[Sequence[str]] = ...,
        smart: Optional[bool] = ...,
        smart_field: Optional[str] = ...,
        shard_count: Optional[int] = ...,
    ) -> Result[Graph]: ...
    async def delete_graph(
        self, name: str, ignore_missing: bool = ..., drop_collections: Optional[bool] = ...
    ) -> Result[bool]: ...
    async def has_document(self, document: Json, rev: Optional[str] = ..., check_rev: bool = ...) -> Result[bool]: ...
    async def document(
        self, document: Json, rev: Optional[str] = ..., check_rev: bool = ...
    ) -> Result[Optional[Json]]: ...
    async def insert_document(
        self,
        collection: str,
        document: Json,
        return_new: bool = ...,
        sync: Optional[bool] = ...,
        silent: bool = ...,
        overwrite: bool = ...,
        return_old: bool = ...,
        overwrite_mode: Optional[str] = ...,
        keep_none: Optional[bool] = ...,
        merge: Optional[bool] = ...,
    ) -> Result[Union[bool, Json]]: ...
    async def update_document(
        self,
        document: Json,
        check_rev: bool = ...,
        merge: bool = ...,
        keep_none: bool = ...,
        return_new: bool = ...,
        return_old: bool = ...,
        sync: Optional[bool] = ...,
        silent: bool = ...,
    ) -> Result[Union[bool, Json]]: ...
    async def replace_document(
        self,
        document: Json,
        check_rev: bool = ...,
        return_new: bool = ...,
        return_old: bool = ...,
        sync: Optional[bool] = ...,
        silent: bool = ...,
    ) -> Result[Union[bool, Json]]: ...
    async def delete_document(
        self,
        document: Union[str, Json],
        rev: Optional[str] = ...,
        check_rev: bool = ...,
        ignore_missing: bool = ...,
        return_old: bool = ...,
        sync: Optional[bool] = ...,
        silent: bool = ...,
    ) -> Result[Union[bool, Json]]: ...
    async def tasks(self) -> Result[Jsons]: ...
    async def task(self, task_id: str) -> Result[Json]: ...
    async def create_task(
        self,
        name: str,
        command: str,
        params: Optional[Json] = ...,
        period: Optional[int] = ...,
        offset: Optional[int] = ...,
        task_id: Optional[str] = ...,
    ) -> Result[Json]: ...
    async def delete_task(self, task_id: str, ignore_missing: bool = ...) -> Result[bool]: ...
    async def has_user(self, username: str) -> Result[bool]: ...
    async def users(self) -> Result[Jsons]: ...
    async def user(self, username: str) -> Result[Json]: ...
    async def create_user(
        self, username: str, password: Optional[str] = ..., active: Optional[bool] = ..., extra: Optional[Json] = ...
    ) -> Result[Json]: ...
    async def update_user(
        self, username: str, password: Optional[str] = ..., active: Optional[bool] = ..., extra: Optional[Json] = ...
    ) -> Result[Json]: ...
    async def replace_user(
        self, username: str, password: str, active: Optional[bool] = ..., extra: Optional[Json] = ...
    ) -> Result[Json]: ...
    async def delete_user(self, username: str, ignore_missing: bool = ...) -> Result[bool]: ...
    async def permissions(self, username: str) -> Result[Json]: ...
    async def permission(self, username: str, database: str, collection: Optional[str] = ...) -> Result[str]: ...
    async def update_permission(
        self, username: str, permission: str, database: str, collection: Optional[str] = ...
    ) -> Result[bool]: ...
    async def reset_permission(self, username: str, database: str, collection: Optional[str] = ...) -> Result[bool]: ...
    async def async_jobs(self, status: str, count: Optional[int] = ...) -> Result[List[str]]: ...
    async def clear_async_jobs(self, threshold: Optional[int] = ...) -> Result[bool]: ...
    async def views(self) -> Result[Jsons]: ...
    async def view(self, name: str) -> Result[Json]: ...
    async def create_view(self, name: str, view_type: str, properties: Optional[Json] = ...) -> Result[Json]: ...
    async def update_view(self, name: str, properties: Json) -> Result[Json]: ...
    async def replace_view(self, name: str, properties: Json) -> Result[Json]: ...
    async def delete_view(self, name: str, ignore_missing: bool = ...) -> Result[bool]: ...
    async def rename_view(self, name: str, new_name: str) -> Result[bool]: ...
    async def create_arangosearch_view(self, name: str, properties: Optional[Json] = ...) -> Result[Json]: ...
    async def update_arangosearch_view(self, name: str, properties: Json) -> Result[Json]: ...
    async def replace_arangosearch_view(self, name: str, properties: Json) -> Result[Json]: ...
    async def analyzers(self) -> Result[Jsons]: ...
    async def analyzer(self, name: str) -> Result[Json]: ...
    async def create_analyzer(
        self, name: str, analyzer_type: str, properties: Optional[Json] = ..., features: Optional[Sequence[str]] = ...
    ) -> Result[Json]: ...
    async def delete_analyzer(self, name: str, force: bool = ..., ignore_missing: bool = ...) -> Result[bool]: ...

class StandardDatabase(Database):
    def __init__(self, connection: Connection) -> None: ...
    def begin_async_execution(self, return_result: bool = ...) -> AsyncDatabase: ...
    def begin_batch_execution(self, return_result: bool = ...) -> BatchDatabase: ...
    async def begin_transaction(
        self,
        read: Union[str, Sequence[str], None] = ...,
        write: Union[str, Sequence[str], None] = ...,
        exclusive: Union[str, Sequence[str], None] = ...,
        sync: Optional[bool] = ...,
        allow_implicit: Optional[bool] = ...,
        lock_timeout: Optional[int] = ...,
        max_size: Optional[int] = ...,
    ) -> TransactionDatabase: ...

class AsyncDatabase(Database):
    def __init__(self, connection: Connection, return_result: bool) -> None: ...

class BatchDatabase(Database):
    def __init__(self, connection: Connection, return_result: bool) -> None: ...
    async def __aenter__(self) -> BatchDatabase: ...
    async def __aexit__(self, exception: Exception, *_: Any) -> None: ...
    def queued_jobs(self) -> Optional[Sequence[BatchJob[Any]]]: ...
    async def commit(self) -> Optional[Sequence[BatchJob[Any]]]: ...

class TransactionDatabase(Database):
    def __init__(self, connection: Connection) -> None: ...
    async def begin_transaction(
        self,
        read: Union[str, Sequence[str], None] = ...,
        write: Union[str, Sequence[str], None] = ...,
        exclusive: Union[str, Sequence[str], None] = ...,
        sync: Optional[bool] = ...,
        allow_implicit: Optional[bool] = ...,
        lock_timeout: Optional[int] = ...,
        max_size: Optional[int] = ...,
    ): ...
    @property
    def transaction_id(self) -> str: ...
    async def transaction_status(self) -> str: ...
    async def commit_transaction(self) -> bool: ...
    async def abort_transaction(self) -> bool: ...
